<!-- Pagination Controls -->
<div class="pagination-container">
  <div class="pagination-info">
    <span class="pagination-text">Showing <span id="showing-start">1</span> to <span id="showing-end">5</span> of <span id="total-products">{{ total_products }}</span> products</span>
  </div>
  <div class="pagination-controls">
    <button type="button" class="pagination-btn" id="prev-page" disabled>
      <span>← Previous</span>
    </button>
    <div class="page-numbers" id="page-numbers">
      <!-- Page numbers will be generated by JavaScript -->
    </div>
    <button type="button" class="pagination-btn" id="next-page">
      <span>Next →</span>
    </button>
  </div>
</div>

<style>
  .pagination-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 30px;
    gap: 16px;
  }
  
  .pagination {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .pagination-btn {
    padding: 8px 12px;
    border: 1px solid #ddd;
    background: white;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
    font-size: 14px;
    min-width: 40px;
  }
  
  .pagination-btn:hover:not(:disabled) {
    background: #f5f5f5;
    border-color: #007bff;
  }
  
  .pagination-btn.active {
    background: #007bff;
    color: white;
    border-color: #007bff;
  }
  
  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .page-numbers {
    display: flex;
    gap: 4px;
  }
  
  .pagination-info {
    color: #666;
    font-size: 14px;
  }
  
  @media (max-width: 768px) {
    .pagination {
      gap: 4px;
    }
    
    .pagination-btn {
      padding: 6px 10px;
      font-size: 12px;
      min-width: 36px;
    }
    
    .page-numbers {
      gap: 2px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const paginationButtons = document.querySelectorAll('.pagination-btn');
    
    // Get pagination data from the parent context or URL
    const totalProducts = {{ total_products | default: 0 }};
    const productsPerPage = 5; // Match your products_per_page value
    const totalPages = Math.ceil(totalProducts / productsPerPage);
    const currentPage = parseInt(new URLSearchParams(window.location.search).get('page')) || 1;
    
    paginationButtons.forEach(button => {
      button.addEventListener('click', function() {
        if (this.disabled) return;
        
        const page = this.dataset.page;
        let newPage = currentPage;
        
        if (page === 'prev') {
          newPage = Math.max(1, newPage - 1);
        } else if (page === 'next') {
          newPage = Math.min(totalPages, newPage + 1);
        } else {
          newPage = parseInt(page);
        }
        
        // Scroll to top of page before navigation
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
        
        // Small delay to allow scroll animation to start
        setTimeout(() => {
          // Update URL and reload or make AJAX call
          const url = new URL(window.location);
          url.searchParams.set('page', newPage);
          window.location.href = url.toString();
        }, 100);
      });
    });
  });
</script> 